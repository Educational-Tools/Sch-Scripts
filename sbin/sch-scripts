#!/bin/sh
# This file is part of sch-scripts, https://sch-scripts.gitlab.io
# Copyright 2012-2022 the sch-scripts team, see AUTHORS
# SPDX-License-Identifier: GPL-3.0-or-later

# Wrapper to execute sch-scripts as root

# Read a tab-separated command from stdin and execute it
# but only if it starts from EXECUTE:
exec_input() {
    local tab old_ifs cmd

    tab=$(printf '\t')
    old_ifs="${IFS-not set}"
    while read -r cmd; do
        IFS=$tab
        set -- $cmd
        test "$old_ifs" = "not set" && unset IFS || IFS="$old_ifs"
        if [ "$1" = "EXECUTE:" ]; then
            shift
            "$@" &
        else
            printf "Ignoring input: %s\n" "$*" >&2
        fi
    done
}

if [ ! -x /usr/share/sch-scripts/sch-scripts.py ]; then
    echo "/usr/share/sch-scripts/sch-scripts.py not found!" >&2
    exit 1
fi

# Ensure the script runs with Python 3
if ! command -v python3 > /dev/null 2>&1; then
    echo "Python 3 is not installed!" >&2
    exit 1
fi

cd /usr/share/sch-scripts
# Work around LP: #1804373
export GTK_OVERLAY_SCROLLING=0
case "$1" in
    # help and version need to run without root
    -h|--help|-v|--version)
        exec ./sch-scripts.py "$@"
        ;;
    *)
        if [ "$(id -u)" -ne 0 ]; then
            pkexec /usr/sbin/sch-scripts "$@" | exec_input
# The above unfortunately wastes one extra shell.
# mkfifo works but it makes the code a bit complicated.
# This doesn't work, it waits until sch-scripts is closed to evaluate its output
#            exec_input <<EOF
#$(pkexec /usr/sbin/sch-scripts "$@")
#EOF
        else
            # sch-scripts rely on some SUDO* variables, set them if unset
            if [ -n "$PKEXEC_UID" ] && [ -z "$SUDO_USER" ]; then
                IFS=":" read -r SUDO_USER _dummy SUDO_UID SUDO_GID _dummy <<EOF
$(getent passwd "$PKEXEC_UID")
EOF
                export SUDO_USER SUDO_UID SUDO_GID
            fi
            if [ -n "$PKEXEC_UID" ]; then
                exec ./sch-scripts.py "$@"
            else
                # This means that the user ran sudo sch-scripts without pkexec
                ./sch-scripts.py "$@" | exec_input
            fi
        fi
        ;;
esac
